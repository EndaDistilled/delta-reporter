{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Delta Reporter Documentation To access a demo of Delta Reporter visit delta-reporter . The goal Next generation reporting tool where results from all kind all tests are displayed in real time The goals of this project are: - Monitor in real time all the automated tests involved on a software development flow Offer image comparison service to be used with visual regression tools Keep an history of the results on previous deployments Automated comparison with older results to suggest type of failure (application change, test to be updated, platform issue) Architecture Delta Reporter is based on a micro service architecture, as the first micro service is a MVP is just split between backend and frontend Backend Based on Flask Frontend Based on NextJS","title":"Welcome to Delta Reporter Documentation"},{"location":"#welcome-to-delta-reporter-documentation","text":"To access a demo of Delta Reporter visit delta-reporter .","title":"Welcome to Delta Reporter Documentation"},{"location":"#the-goal","text":"Next generation reporting tool where results from all kind all tests are displayed in real time The goals of this project are: - Monitor in real time all the automated tests involved on a software development flow Offer image comparison service to be used with visual regression tools Keep an history of the results on previous deployments Automated comparison with older results to suggest type of failure (application change, test to be updated, platform issue)","title":"The goal"},{"location":"#architecture","text":"Delta Reporter is based on a micro service architecture, as the first micro service is a MVP is just split between backend and frontend","title":"Architecture"},{"location":"#backend","text":"Based on Flask","title":"Backend"},{"location":"#frontend","text":"Based on NextJS","title":"Frontend"},{"location":"deployment/","text":"Deployment to Production Kubernetes To deploy Delta Reporter into Minikube, follow this instructions: First add this repo to Helm and install Delta Reporter helm repo add delta https://delta-reporter.github.io/helm helm install delta-reporter delta/delta-reporter If no errors are met, Delta Reporter should be alive into Minikube, so we just need to expose it Expose Delta Reporter's Core service kubectl delete service delta-core kubectl expose deployment delta-core --type=LoadBalancer minikube service delta-core --url Expose Delta Reporter's Frontend service kubectl delete service delta-frontend kubectl expose deployment delta-frontend --type=LoadBalancer minikube service delta-frontend --url AWS Delta Reporter uses the Serverless Framework to be easily deployed as Lambda functions Its a good idea to install Serverless Framework globally in your system: npm install -g serverless First you need to have your AWS credentials at ~/.aws/ Serverless Framework will use it to create the resources needed Then, you should clone core and frontend repositories, install dependencies and deploy each service, we should start with the core service first Core Service Clone Core service repository: git clone https://github.com/delta-reporter/delta-core.git Create a Python virtual environment and install the dependencies: cd delta-core pip install virtualenv virtualenv venv --python=python3 source venv/bin/activate pip install -r requirements.txt npm install Modify the serverless.yml file if you need to specify a domain name or other settings Make the deployment into AWS with: sls deploy After its deployed, go into AWS and set these required environment variables: APP_SETTINGS=config.DevelopmentConfig DATABASE_URL=postgresql://<user>:<password>@<host>:<port>/<db_name> Frontend Service Clone Frontend service repository: git clone https://github.com/delta-reporter/delta-frontend.git Install dependencies: cd delta-frontend npm install # or yarn Then export the environment variable DELTA_CORE_URL with the endpoint of the Core service, so the lambda get generated with this parameter: export DELTA_CORE_URL=<core_service_endpoint> You'll need the environment variable PORT as well: export PORT=<port_number> Time to deploy it into AWS serverless","title":"Deployment to Production"},{"location":"deployment/#deployment-to-production","text":"","title":"Deployment to Production"},{"location":"deployment/#kubernetes","text":"To deploy Delta Reporter into Minikube, follow this instructions: First add this repo to Helm and install Delta Reporter helm repo add delta https://delta-reporter.github.io/helm helm install delta-reporter delta/delta-reporter If no errors are met, Delta Reporter should be alive into Minikube, so we just need to expose it Expose Delta Reporter's Core service kubectl delete service delta-core kubectl expose deployment delta-core --type=LoadBalancer minikube service delta-core --url Expose Delta Reporter's Frontend service kubectl delete service delta-frontend kubectl expose deployment delta-frontend --type=LoadBalancer minikube service delta-frontend --url","title":"Kubernetes"},{"location":"deployment/#aws","text":"Delta Reporter uses the Serverless Framework to be easily deployed as Lambda functions Its a good idea to install Serverless Framework globally in your system: npm install -g serverless First you need to have your AWS credentials at ~/.aws/ Serverless Framework will use it to create the resources needed Then, you should clone core and frontend repositories, install dependencies and deploy each service, we should start with the core service first","title":"AWS"},{"location":"deployment/#core-service","text":"Clone Core service repository: git clone https://github.com/delta-reporter/delta-core.git Create a Python virtual environment and install the dependencies: cd delta-core pip install virtualenv virtualenv venv --python=python3 source venv/bin/activate pip install -r requirements.txt npm install Modify the serverless.yml file if you need to specify a domain name or other settings Make the deployment into AWS with: sls deploy After its deployed, go into AWS and set these required environment variables: APP_SETTINGS=config.DevelopmentConfig DATABASE_URL=postgresql://<user>:<password>@<host>:<port>/<db_name>","title":"Core Service"},{"location":"deployment/#frontend-service","text":"Clone Frontend service repository: git clone https://github.com/delta-reporter/delta-frontend.git Install dependencies: cd delta-frontend npm install # or yarn Then export the environment variable DELTA_CORE_URL with the endpoint of the Core service, so the lambda get generated with this parameter: export DELTA_CORE_URL=<core_service_endpoint> You'll need the environment variable PORT as well: export PORT=<port_number> Time to deploy it into AWS serverless","title":"Frontend Service"},{"location":"dev_deployment/","text":"Local Deployment for development Docker Compose can be used to deploy all Delta services and perform real time changes. This page contains information on how to set Delta Reporter locally for development purposes. This is the main Delta repository: https://github.com/delta-reporter/delta-reporter.git Local dev deployment To start with, clone main delta repository (preferably in your root folder create a folder called \"delta-local\" and clone it there) git clone https://github.com/delta-reporter/delta-reporter.git All the files needed for local deployment are located in /dev folder. In the delta-reporter/dev/ folder you will find a script to easily clone all the other repositories of the project (core and frontend repos) cd dev && ./clone_services.sh Or do it manually: - Core https://github.com/delta-reporter/delta-core.git - Frontend https://github.com/delta-reporter/delta-frontend.git After cloning the repos, you have the option to let the script build the images from each repo You might need to go to /delta-frontend/ and run npm install to have all the dependencies ready. Since the application is dockerized, it can be deployed easily with Docker Compose. To spin up the application simply run the following commands from your /delta-reporter/dev/ folder docker-compose build && docker-compose up Before you start using Delta Reporter, you'll need to initialize the database and some default values, please follow the instructions below. Database Before start using Delta Reporter, you'll need to initialize the database and some default values, do this with this command: docker exec delta_core_dev python manage.py db upgrade This command run the scripts located in migrations/versions/ in order to apply the changes on the database Then, to load default values, send a POST request to the endpoint /api/v1/initial_setup by running: curl -X POST http://localhost:5000/api/v1/initial_setup If no errors are met, the environment should be ready on: http://localhost:3000 Generating test data To be able to work with delta, you will need some test data in your database. In order to generate the data, you will need to clone one of our test clients (testNG, PHPUnit or wdio) and run the tests. Note, Delta Reporter should be up and running, when you do so. For example: Clone TestNG client plugin https://github.com/delta-reporter/delta-reporter-testng.git Install maven, if you don't have it on your local machine https://www.appsdeveloperblog.com/how-to-install-maven-on-mac-os/ Go to that /delta-reporter-testng/ folder and run the tests mvn clean test -Dsurefire.suiteXmlFiles=suites/TestSuite1.xml Useful information http://localhost:3000/ | Delta Frontend Service http://localhost:5000/ | Delta Core Service The server will restart automatically on any change in the code To stop the server at any stage use docker-compose stop","title":"Local Deployment for development"},{"location":"dev_deployment/#local-deployment-for-development","text":"Docker Compose can be used to deploy all Delta services and perform real time changes. This page contains information on how to set Delta Reporter locally for development purposes. This is the main Delta repository: https://github.com/delta-reporter/delta-reporter.git","title":"Local Deployment for development"},{"location":"dev_deployment/#local-dev-deployment","text":"To start with, clone main delta repository (preferably in your root folder create a folder called \"delta-local\" and clone it there) git clone https://github.com/delta-reporter/delta-reporter.git All the files needed for local deployment are located in /dev folder. In the delta-reporter/dev/ folder you will find a script to easily clone all the other repositories of the project (core and frontend repos) cd dev && ./clone_services.sh Or do it manually: - Core https://github.com/delta-reporter/delta-core.git - Frontend https://github.com/delta-reporter/delta-frontend.git After cloning the repos, you have the option to let the script build the images from each repo You might need to go to /delta-frontend/ and run npm install to have all the dependencies ready. Since the application is dockerized, it can be deployed easily with Docker Compose. To spin up the application simply run the following commands from your /delta-reporter/dev/ folder docker-compose build && docker-compose up Before you start using Delta Reporter, you'll need to initialize the database and some default values, please follow the instructions below.","title":"Local dev deployment"},{"location":"dev_deployment/#database","text":"Before start using Delta Reporter, you'll need to initialize the database and some default values, do this with this command: docker exec delta_core_dev python manage.py db upgrade This command run the scripts located in migrations/versions/ in order to apply the changes on the database Then, to load default values, send a POST request to the endpoint /api/v1/initial_setup by running: curl -X POST http://localhost:5000/api/v1/initial_setup If no errors are met, the environment should be ready on: http://localhost:3000","title":"Database"},{"location":"dev_deployment/#generating-test-data","text":"To be able to work with delta, you will need some test data in your database. In order to generate the data, you will need to clone one of our test clients (testNG, PHPUnit or wdio) and run the tests. Note, Delta Reporter should be up and running, when you do so. For example: Clone TestNG client plugin https://github.com/delta-reporter/delta-reporter-testng.git Install maven, if you don't have it on your local machine https://www.appsdeveloperblog.com/how-to-install-maven-on-mac-os/ Go to that /delta-reporter-testng/ folder and run the tests mvn clean test -Dsurefire.suiteXmlFiles=suites/TestSuite1.xml","title":"Generating test data"},{"location":"dev_deployment/#useful-information","text":"http://localhost:3000/ | Delta Frontend Service http://localhost:5000/ | Delta Core Service The server will restart automatically on any change in the code To stop the server at any stage use docker-compose stop","title":"Useful information"}]}
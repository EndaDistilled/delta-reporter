{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Delta Reporter Overview Delta Reporter is next generation reporting tool, where results from all kind of tests are displayed in real time. It is lightweight and easy to deploy and use. And of course, it's open source!!! The primary goal of this tool is to bring the best testing experience. It is designed by QA Engineers for QA Engineers, so that the reports are simple, give the most important information at glance. It's a real game changer in terms of test maintenance experience, with all the data gathered in one place. It can be used by any member of tech team, as it's providing a lot of add-on features to suit all needs. The main features of this project are: Monitoring all the automated tests involved on a software development flow in real time in one place Keeping the history of the results on previous deployments Automated comparison with older results to suggest type of failure (application change, test to be updated, platform issue) Technology used Flask - easy and lightweight micro web framework written in Python React - Next.js framework used in world\u2019s leading companies PostgreSQL - open Source Relational Database Start using Delta Reporter There are few main steps to get the Delta Reporter running for your team. Please check out our Getting Started Guide for the details. To dive into the look and feel, check out our Delta Demo Page . Ask for support Please don't hesitate to contact us or report a bug on Github Issues .","title":"Delta Reporter Overview"},{"location":"#delta-reporter-overview","text":"Delta Reporter is next generation reporting tool, where results from all kind of tests are displayed in real time. It is lightweight and easy to deploy and use. And of course, it's open source!!! The primary goal of this tool is to bring the best testing experience. It is designed by QA Engineers for QA Engineers, so that the reports are simple, give the most important information at glance. It's a real game changer in terms of test maintenance experience, with all the data gathered in one place. It can be used by any member of tech team, as it's providing a lot of add-on features to suit all needs. The main features of this project are: Monitoring all the automated tests involved on a software development flow in real time in one place Keeping the history of the results on previous deployments Automated comparison with older results to suggest type of failure (application change, test to be updated, platform issue)","title":"Delta Reporter Overview"},{"location":"#technology-used","text":"Flask - easy and lightweight micro web framework written in Python React - Next.js framework used in world\u2019s leading companies PostgreSQL - open Source Relational Database","title":"Technology used"},{"location":"#start-using-delta-reporter","text":"There are few main steps to get the Delta Reporter running for your team. Please check out our Getting Started Guide for the details. To dive into the look and feel, check out our Delta Demo Page .","title":"Start using Delta Reporter"},{"location":"#ask-for-support","text":"Please don't hesitate to contact us or report a bug on Github Issues .","title":"Ask for support"},{"location":"cicd/","text":"CI\\CD configuration You can use Delta Reporter with any CI\\CD tool in the market. All you need is to follow this process: Create a launch in Delta Reporter, and store its id as the environment variable DELTA_LAUNCH_ID Run your tests! DELTA_LAUNCH_ID will be read by any Delta Reporter client available (Unit tests, Integration, End to End). And the results for each one, are going to be saved as a test run for the same launch. When all your tests have finished, terminate the launch Jenkins Example In the job running a set of specific tests, you will have to define DELTA_LAUNCH_ID as a parameter, this way you can pass the same DELTA_LAUNCH_ID to several upstream jobs running tests. Then inside your stage you will need to initialize DELTA_LAUNCH_ID by calling a /api/v1/launch endpoint by POST, then running your tests with DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} pre-pending. The initialization is done once, so when you are running multiple test types in the same build (say, UI tests, API tests, Unit tests), those tests are gathered under one \"Launch\" on Delta Reporter. At the end, we call /api/v1/finish_launch to finish the launch and end the process. Below is an example of code for config file for Jenkins job: // ... parameters { string defaultValue: '', description: 'Launch ID sent by a pipeline, leave it blank', name: 'DELTA_LAUNCH_ID', trim: false } // ... stage('Run WDIO tests') { environment { DELTA_LAUNCH_ID = \"\" } steps { container('jenkins-node-worker') { script { try { DELTA_LAUNCH_ID=sh(script: \"curl -s --header \\\"Content-Type: application/json\\\" --request POST --data '{\\\"name\\\": \\\"${JOB_NAME} | ${BUILD_NUMBER} | Wdio Tests\\\", \\\"project\\\": \\\"Your project\\\"}' https://delta-core-url/api/v1/launch | python -c 'import sys, json; print(json.load(sys.stdin)[\\\"id\\\"])';\", returnStdout: true) } catch (Exception e) { echo 'Couldn\\'t start launch on Delta Reporter: ' + e } sh \"DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} TEST_TYPE='Frontend Acceptance Tests' ./node_modules/.bin/wdio ./wdio.conf.js\" } } } post { always { container('jenkins-node-worker') { script { try { // Finish launch on Delta Reporter sh \"curl -s --header \\\"Content-Type: application/json\\\" --request PUT --data '{\\\"launch_id\\\": ${LEGACY_DELTA_LAUNCH_ID}}' https://delta-core-url/api/v1/finish_launch\" } catch (Exception e) { echo 'Couldn\\'t finish launch on Delta Reporter for legacy: ' + e } } } } } } Github Actions Example Below is an example of code for a Github Action: name: Delta Reporter Launch Demo jobs: tests: name: Tests steps: - name: Create Delta Launch id: delta_launch_creation run: | DELTA_LAUNCH_ID=$(curl -s --header \"Content-Type: application/json\" --request POST --data '{\"name\": \"Demo Launch '\"${GITHUB_SHA:0:7}\"'\", \"project\": \"Delta Reporter\"}' https://delta-core-url/api/v1/launch | python -c 'import sys, json; print(json.load(sys.stdin)[\"id\"])';) echo $DELTA_LAUNCH_ID echo ::set-output name=delta_launch_id::${DELTA_LAUNCH_ID} - name: Notify test results uses: actions/github-script@v4 env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} with: script: | github.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `Launch ${process.env.DELTA_LAUNCH_ID} has started, check tests results in real time [here](https://delta-core-url/testruns/${process.env.DELTA_LAUNCH_ID})` }) - name: Run tests env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} run: | echo \"DELTA LAUNCH ID $DELTA_LAUNCH_ID\" DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} ./vendor/bin/phpunit echo \"Exit code $?\" - name: Finish test launch env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} run: | curl -s --header \"Content-Type: application/json\" --request PUT --data '{\"launch_id\": ${DELTA_LAUNCH_ID}}' https://delta-core-url/api/v1/finish_launch","title":"CI\\CD configuration"},{"location":"cicd/#cicd-configuration","text":"You can use Delta Reporter with any CI\\CD tool in the market. All you need is to follow this process: Create a launch in Delta Reporter, and store its id as the environment variable DELTA_LAUNCH_ID Run your tests! DELTA_LAUNCH_ID will be read by any Delta Reporter client available (Unit tests, Integration, End to End). And the results for each one, are going to be saved as a test run for the same launch. When all your tests have finished, terminate the launch","title":"CI\\CD configuration"},{"location":"cicd/#jenkins-example","text":"In the job running a set of specific tests, you will have to define DELTA_LAUNCH_ID as a parameter, this way you can pass the same DELTA_LAUNCH_ID to several upstream jobs running tests. Then inside your stage you will need to initialize DELTA_LAUNCH_ID by calling a /api/v1/launch endpoint by POST, then running your tests with DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} pre-pending. The initialization is done once, so when you are running multiple test types in the same build (say, UI tests, API tests, Unit tests), those tests are gathered under one \"Launch\" on Delta Reporter. At the end, we call /api/v1/finish_launch to finish the launch and end the process. Below is an example of code for config file for Jenkins job: // ... parameters { string defaultValue: '', description: 'Launch ID sent by a pipeline, leave it blank', name: 'DELTA_LAUNCH_ID', trim: false } // ... stage('Run WDIO tests') { environment { DELTA_LAUNCH_ID = \"\" } steps { container('jenkins-node-worker') { script { try { DELTA_LAUNCH_ID=sh(script: \"curl -s --header \\\"Content-Type: application/json\\\" --request POST --data '{\\\"name\\\": \\\"${JOB_NAME} | ${BUILD_NUMBER} | Wdio Tests\\\", \\\"project\\\": \\\"Your project\\\"}' https://delta-core-url/api/v1/launch | python -c 'import sys, json; print(json.load(sys.stdin)[\\\"id\\\"])';\", returnStdout: true) } catch (Exception e) { echo 'Couldn\\'t start launch on Delta Reporter: ' + e } sh \"DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} TEST_TYPE='Frontend Acceptance Tests' ./node_modules/.bin/wdio ./wdio.conf.js\" } } } post { always { container('jenkins-node-worker') { script { try { // Finish launch on Delta Reporter sh \"curl -s --header \\\"Content-Type: application/json\\\" --request PUT --data '{\\\"launch_id\\\": ${LEGACY_DELTA_LAUNCH_ID}}' https://delta-core-url/api/v1/finish_launch\" } catch (Exception e) { echo 'Couldn\\'t finish launch on Delta Reporter for legacy: ' + e } } } } } }","title":"Jenkins Example"},{"location":"cicd/#github-actions-example","text":"Below is an example of code for a Github Action: name: Delta Reporter Launch Demo jobs: tests: name: Tests steps: - name: Create Delta Launch id: delta_launch_creation run: | DELTA_LAUNCH_ID=$(curl -s --header \"Content-Type: application/json\" --request POST --data '{\"name\": \"Demo Launch '\"${GITHUB_SHA:0:7}\"'\", \"project\": \"Delta Reporter\"}' https://delta-core-url/api/v1/launch | python -c 'import sys, json; print(json.load(sys.stdin)[\"id\"])';) echo $DELTA_LAUNCH_ID echo ::set-output name=delta_launch_id::${DELTA_LAUNCH_ID} - name: Notify test results uses: actions/github-script@v4 env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} with: script: | github.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `Launch ${process.env.DELTA_LAUNCH_ID} has started, check tests results in real time [here](https://delta-core-url/testruns/${process.env.DELTA_LAUNCH_ID})` }) - name: Run tests env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} run: | echo \"DELTA LAUNCH ID $DELTA_LAUNCH_ID\" DELTA_LAUNCH_ID=${DELTA_LAUNCH_ID} ./vendor/bin/phpunit echo \"Exit code $?\" - name: Finish test launch env: DELTA_LAUNCH_ID: ${{ steps.delta_launch_creation.outputs.delta_launch_id }} run: | curl -s --header \"Content-Type: application/json\" --request PUT --data '{\"launch_id\": ${DELTA_LAUNCH_ID}}' https://delta-core-url/api/v1/finish_launch","title":"Github Actions Example"},{"location":"contributing/","text":"Contributing to Delta development Your main contribution is a daily use our product! Also, if you like Delta Reporter, share a nice recommendation with your colleagues! We love to see happy users multiplying! If you have some time and energy, we are really happy to receive any help from you! Please, feel free to contribute by: Opening a PR in any of our project repos Adding a bug ticket on Github Issues Sending us an email with any feedback/ideas/thoughts that you have Thank you so much! <3 Projects currently in development: Cypress plugin JUnit plugin Jest plugin","title":"Contributing to Delta development"},{"location":"contributing/#contributing-to-delta-development","text":"Your main contribution is a daily use our product! Also, if you like Delta Reporter, share a nice recommendation with your colleagues! We love to see happy users multiplying! If you have some time and energy, we are really happy to receive any help from you! Please, feel free to contribute by: Opening a PR in any of our project repos Adding a bug ticket on Github Issues Sending us an email with any feedback/ideas/thoughts that you have Thank you so much! <3","title":"Contributing to Delta development"},{"location":"contributing/#projects-currently-in-development","text":"Cypress plugin JUnit plugin Jest plugin","title":"Projects currently in development:"},{"location":"cypress/","text":"Cypress Plugin [Plugin is in active development]","title":"Cypress Plugin"},{"location":"cypress/#cypress-plugin","text":"[Plugin is in active development]","title":"Cypress Plugin"},{"location":"deployment/","text":"Deploying Delta in Minikube Kubernetes To deploy Delta Reporter into Minikube, follow this instructions: First add this repo to Helm and install Delta Reporter helm repo add delta https://delta-reporter.github.io/helm helm install delta-reporter delta/delta-reporter If no errors are met, Delta Reporter should be alive into Minikube, so we just need to expose it Expose Delta Reporter's Core service kubectl delete service delta-core kubectl expose deployment delta-core --type=LoadBalancer minikube service delta-core --url Expose Delta Reporter's Frontend service kubectl delete service delta-frontend kubectl expose deployment delta-frontend --type=LoadBalancer minikube service delta-frontend --url AWS Delta Reporter uses the Serverless Framework to be easily deployed as Lambda functions Its a good idea to install Serverless Framework globally in your system: npm install -g serverless First you need to have your AWS credentials at ~/.aws/ Serverless Framework will use it to create the resources needed Then, you should clone core and frontend repositories, install dependencies and deploy each service, we should start with the core service first Core Service Clone Core service repository: git clone https://github.com/delta-reporter/delta-core.git Create a Python virtual environment and install the dependencies: cd delta-core pip install virtualenv virtualenv venv --python=python3 source venv/bin/activate pip install -r requirements.txt npm install Modify the serverless.yml file if you need to specify a domain name or other settings Make the deployment into AWS with: sls deploy After its deployed, go into AWS and set these required environment variables: APP_SETTINGS=config.DevelopmentConfig DATABASE_URL=postgresql://<user>:<password>@<host>:<port>/<db_name> Frontend Service Clone Frontend service repository: git clone https://github.com/delta-reporter/delta-frontend.git Install dependencies: cd delta-frontend npm install # or yarn Then export the environment variable DELTA_CORE_URL with the endpoint of the Core service, so the lambda get generated with this parameter: export DELTA_CORE_URL=<core_service_endpoint> You'll need the environment variable PORT as well: export PORT=<port_number> Time to deploy it into AWS serverless","title":"Deploying Delta in Minikube"},{"location":"deployment/#deploying-delta-in-minikube","text":"","title":"Deploying Delta in Minikube"},{"location":"deployment/#kubernetes","text":"To deploy Delta Reporter into Minikube, follow this instructions: First add this repo to Helm and install Delta Reporter helm repo add delta https://delta-reporter.github.io/helm helm install delta-reporter delta/delta-reporter If no errors are met, Delta Reporter should be alive into Minikube, so we just need to expose it Expose Delta Reporter's Core service kubectl delete service delta-core kubectl expose deployment delta-core --type=LoadBalancer minikube service delta-core --url Expose Delta Reporter's Frontend service kubectl delete service delta-frontend kubectl expose deployment delta-frontend --type=LoadBalancer minikube service delta-frontend --url","title":"Kubernetes"},{"location":"deployment/#aws","text":"Delta Reporter uses the Serverless Framework to be easily deployed as Lambda functions Its a good idea to install Serverless Framework globally in your system: npm install -g serverless First you need to have your AWS credentials at ~/.aws/ Serverless Framework will use it to create the resources needed Then, you should clone core and frontend repositories, install dependencies and deploy each service, we should start with the core service first","title":"AWS"},{"location":"deployment/#core-service","text":"Clone Core service repository: git clone https://github.com/delta-reporter/delta-core.git Create a Python virtual environment and install the dependencies: cd delta-core pip install virtualenv virtualenv venv --python=python3 source venv/bin/activate pip install -r requirements.txt npm install Modify the serverless.yml file if you need to specify a domain name or other settings Make the deployment into AWS with: sls deploy After its deployed, go into AWS and set these required environment variables: APP_SETTINGS=config.DevelopmentConfig DATABASE_URL=postgresql://<user>:<password>@<host>:<port>/<db_name>","title":"Core Service"},{"location":"deployment/#frontend-service","text":"Clone Frontend service repository: git clone https://github.com/delta-reporter/delta-frontend.git Install dependencies: cd delta-frontend npm install # or yarn Then export the environment variable DELTA_CORE_URL with the endpoint of the Core service, so the lambda get generated with this parameter: export DELTA_CORE_URL=<core_service_endpoint> You'll need the environment variable PORT as well: export PORT=<port_number> Time to deploy it into AWS serverless","title":"Frontend Service"},{"location":"dev_deployment/","text":"Deploying Delta locally Docker Compose can be used to deploy all Delta services and perform real time changes. This page contains information on how to set Delta Reporter locally for development purposes. This is the main Delta repository: https://github.com/delta-reporter/delta-reporter.git Local dev deployment To start with, clone main delta repository (preferably in your root folder create a folder called \"delta-local\" and clone it there) git clone https://github.com/delta-reporter/delta-reporter.git All the files needed for local deployment are located in /dev folder. In the delta-reporter/dev/ folder you will find a script to easily clone all the other repositories of the project (core and frontend repos) cd dev && ./clone_services.sh Or do it manually: - Core https://github.com/delta-reporter/delta-core.git - Frontend https://github.com/delta-reporter/delta-frontend.git After cloning the repos, you have the option to let the script build the images from each repo You might need to go to /delta-frontend/ and run npm install to have all the dependencies ready. Since the application is dockerized, it can be deployed easily with Docker Compose. To spin up the application simply run the following commands from your /delta-reporter/dev/ folder docker-compose build && docker-compose up Before you start using Delta Reporter, you'll need to initialize the database and some default values, please follow the instructions below. Database Before start using Delta Reporter, you'll need to initialize the database and some default values, do this with this command: docker exec delta_core_dev python manage.py db upgrade This command run the scripts located in migrations/versions/ in order to apply the changes on the database Then, to load default values, send a POST request to the endpoint /api/v1/initial_setup by running: curl -X POST http://localhost:5000/api/v1/initial_setup If no errors are met, the environment should be ready on: http://localhost:3000 Generating test data To be able to work with delta, you will need some test data in your database. In order to generate the data, you will need to clone one of our test clients (testNG, PHPUnit or wdio) and run the tests. Note, Delta Reporter should be up and running, when you do so. For example: Clone TestNG client plugin https://github.com/delta-reporter/delta-reporter-testng.git Install maven, if you don't have it on your local machine https://www.appsdeveloperblog.com/how-to-install-maven-on-mac-os/ Go to that /delta-reporter-testng/ folder and run the tests mvn clean test -Dsurefire.suiteXmlFiles=suites/TestSuite1.xml Useful information http://localhost:3000/ | Delta Frontend Service http://localhost:5000/ | Delta Core Service The server will restart automatically on any change in the code To stop the server at any stage use docker-compose stop","title":"Deploying Delta locally"},{"location":"dev_deployment/#deploying-delta-locally","text":"Docker Compose can be used to deploy all Delta services and perform real time changes. This page contains information on how to set Delta Reporter locally for development purposes. This is the main Delta repository: https://github.com/delta-reporter/delta-reporter.git","title":"Deploying Delta locally"},{"location":"dev_deployment/#local-dev-deployment","text":"To start with, clone main delta repository (preferably in your root folder create a folder called \"delta-local\" and clone it there) git clone https://github.com/delta-reporter/delta-reporter.git All the files needed for local deployment are located in /dev folder. In the delta-reporter/dev/ folder you will find a script to easily clone all the other repositories of the project (core and frontend repos) cd dev && ./clone_services.sh Or do it manually: - Core https://github.com/delta-reporter/delta-core.git - Frontend https://github.com/delta-reporter/delta-frontend.git After cloning the repos, you have the option to let the script build the images from each repo You might need to go to /delta-frontend/ and run npm install to have all the dependencies ready. Since the application is dockerized, it can be deployed easily with Docker Compose. To spin up the application simply run the following commands from your /delta-reporter/dev/ folder docker-compose build && docker-compose up Before you start using Delta Reporter, you'll need to initialize the database and some default values, please follow the instructions below.","title":"Local dev deployment"},{"location":"dev_deployment/#database","text":"Before start using Delta Reporter, you'll need to initialize the database and some default values, do this with this command: docker exec delta_core_dev python manage.py db upgrade This command run the scripts located in migrations/versions/ in order to apply the changes on the database Then, to load default values, send a POST request to the endpoint /api/v1/initial_setup by running: curl -X POST http://localhost:5000/api/v1/initial_setup If no errors are met, the environment should be ready on: http://localhost:3000","title":"Database"},{"location":"dev_deployment/#generating-test-data","text":"To be able to work with delta, you will need some test data in your database. In order to generate the data, you will need to clone one of our test clients (testNG, PHPUnit or wdio) and run the tests. Note, Delta Reporter should be up and running, when you do so. For example: Clone TestNG client plugin https://github.com/delta-reporter/delta-reporter-testng.git Install maven, if you don't have it on your local machine https://www.appsdeveloperblog.com/how-to-install-maven-on-mac-os/ Go to that /delta-reporter-testng/ folder and run the tests mvn clean test -Dsurefire.suiteXmlFiles=suites/TestSuite1.xml","title":"Generating test data"},{"location":"dev_deployment/#useful-information","text":"http://localhost:3000/ | Delta Frontend Service http://localhost:5000/ | Delta Core Service The server will restart automatically on any change in the code To stop the server at any stage use docker-compose stop","title":"Useful information"},{"location":"jest/","text":"Jest Plugin [Plugin is in active development]","title":"Jest Plugin"},{"location":"jest/#jest-plugin","text":"[Plugin is in active development]","title":"Jest Plugin"},{"location":"junit/","text":"JUnit Plugin [Plugin is in active development]","title":"JUnit Plugin"},{"location":"junit/#junit-plugin","text":"[Plugin is in active development]","title":"JUnit Plugin"},{"location":"main_features/","text":"Features This section is dedicated to the features we have on Delta Reporter, to help devs and QAs debug their test failures faster! Info section Info section contains the most important information about your failed test. You can check out the full path to the test, error logs, duration, screenshot and video of the test failing! Resolution section This is a handy tool to put a resolution badge on your tests. So that next time you view test results, you can quickly identify what's the issue without even checking the error message. Also it's useful, when you check same test results with your colleagues, so they know you've already identified the issue. Test History section This tab contains historical information about this test: status, date, resolution if amy. FLaky badge Another handy feature is this little flaky icon , that appears, if the test failed more than 5 out of 10 latest runs. This helps tester to quickly spot that the test might need to be looked at. Filtering by test status This top bar on the report allows you to filter tests by status. Normally, a tester would be interested in failed tests first, so you can filter out all other tests and leave just the failed ones to view. Same with skipped, for example. It can be beneficial to go and review skipped tests list once in a while to evaluate, why exactly you have commented them out once. Realtime updates The test report page is updated in realtime. This can be useful in the situations, where you can't wait until the job finishes, you need to react now. For example, when you expect some test failures on release pipeline, this is a great way to view and fix them even before the job is over. Smart Links You can create custom links on Delta Reporter, which can be really useful to integrate with any third-party tools you use for your testing. To name a few examples: Logs from the system under test (like Kibana) A link back to the CI/CD job that started the test run (like Jenkins, Azure Pipelines, Travis) Bug management tools (like Bugzilla, JIRA) Any other external application In order to add a custom button to the test report, first go to your project options: This will open a modal window where you can create your useful links for the project selected The useful links could be displayed in two places on the report: Test Run View (if the tool is related to the whole run, say CI job link, that's global for this particular run) or Test View (if the tool is specific to each test, say link to the logs with the time range specific, to when this particular test was run) Besides selecting a location for the new link, you can also set a regular expression, which is going to be compared with the environment under test, when this is activated, the link will only be displayed in the environment that matched it, so feel free to set different links for different testing environments Its possible to enrich a link with data from Delta Reporter, this way you could send ids, timestamps, and other data to other systems with just one click, to include fields into a link, just write the name of the field you want and surround it with curly brackets https://foo.bar/{<field_name>} The availability of the fields you can pass into it will depend on the location: Test Run id start_datetime test_type test_run_status_id launch_id end_datetime environment Test id retries test_suite_history_id start_datetime end_datetime mother_test_id message test_status_id error_type test_resolution_id test_run_id It's also possible to send custom data back to Delta Reporter, please check the plugin for your framework for details. Useful links examples Based on the screenshot above, we can see 4 links with the following usage: First: Link to a Jenkins Job that launches the tests, the link uses custom data sent by the client plugin, in this case the value for the link is: {jenkins_url} Second: Link to a external tool for Visual Regression testing, the link uses custom data sent the client plugin, in this case the value for the link is: {spectre_test_run_url}?status=fail Third: Link an external tool to create a bug related to this failed tests, the link uses the test id in order to have a back reference, in this case the value for the link is: <tool_url>?test={id} Fourth: Link to Kibana to access logs for the system under test, the link uses the time in the test to filter the logs in the range were the test was running, in this case the value for the link is: <kibana_url>/discover?_g=(time:(from:'{start_datetime}',mode:absolute,to:'{end_datetime}'))","title":"Features"},{"location":"main_features/#features","text":"This section is dedicated to the features we have on Delta Reporter, to help devs and QAs debug their test failures faster!","title":"Features"},{"location":"main_features/#info-section","text":"Info section contains the most important information about your failed test. You can check out the full path to the test, error logs, duration, screenshot and video of the test failing!","title":"Info section"},{"location":"main_features/#resolution-section","text":"This is a handy tool to put a resolution badge on your tests. So that next time you view test results, you can quickly identify what's the issue without even checking the error message. Also it's useful, when you check same test results with your colleagues, so they know you've already identified the issue.","title":"Resolution section"},{"location":"main_features/#test-history-section","text":"This tab contains historical information about this test: status, date, resolution if amy.","title":"Test History section"},{"location":"main_features/#flaky-badge","text":"Another handy feature is this little flaky icon , that appears, if the test failed more than 5 out of 10 latest runs. This helps tester to quickly spot that the test might need to be looked at.","title":"FLaky badge"},{"location":"main_features/#filtering-by-test-status","text":"This top bar on the report allows you to filter tests by status. Normally, a tester would be interested in failed tests first, so you can filter out all other tests and leave just the failed ones to view. Same with skipped, for example. It can be beneficial to go and review skipped tests list once in a while to evaluate, why exactly you have commented them out once.","title":"Filtering by test status"},{"location":"main_features/#realtime-updates","text":"The test report page is updated in realtime. This can be useful in the situations, where you can't wait until the job finishes, you need to react now. For example, when you expect some test failures on release pipeline, this is a great way to view and fix them even before the job is over.","title":"Realtime updates"},{"location":"main_features/#smart-links","text":"You can create custom links on Delta Reporter, which can be really useful to integrate with any third-party tools you use for your testing. To name a few examples: Logs from the system under test (like Kibana) A link back to the CI/CD job that started the test run (like Jenkins, Azure Pipelines, Travis) Bug management tools (like Bugzilla, JIRA) Any other external application In order to add a custom button to the test report, first go to your project options: This will open a modal window where you can create your useful links for the project selected The useful links could be displayed in two places on the report: Test Run View (if the tool is related to the whole run, say CI job link, that's global for this particular run) or Test View (if the tool is specific to each test, say link to the logs with the time range specific, to when this particular test was run) Besides selecting a location for the new link, you can also set a regular expression, which is going to be compared with the environment under test, when this is activated, the link will only be displayed in the environment that matched it, so feel free to set different links for different testing environments Its possible to enrich a link with data from Delta Reporter, this way you could send ids, timestamps, and other data to other systems with just one click, to include fields into a link, just write the name of the field you want and surround it with curly brackets https://foo.bar/{<field_name>} The availability of the fields you can pass into it will depend on the location:","title":"Smart Links"},{"location":"main_features/#test-run","text":"id start_datetime test_type test_run_status_id launch_id end_datetime environment","title":"Test Run"},{"location":"main_features/#test","text":"id retries test_suite_history_id start_datetime end_datetime mother_test_id message test_status_id error_type test_resolution_id test_run_id It's also possible to send custom data back to Delta Reporter, please check the plugin for your framework for details.","title":"Test"},{"location":"main_features/#useful-links-examples","text":"Based on the screenshot above, we can see 4 links with the following usage: First: Link to a Jenkins Job that launches the tests, the link uses custom data sent by the client plugin, in this case the value for the link is: {jenkins_url} Second: Link to a external tool for Visual Regression testing, the link uses custom data sent the client plugin, in this case the value for the link is: {spectre_test_run_url}?status=fail Third: Link an external tool to create a bug related to this failed tests, the link uses the test id in order to have a back reference, in this case the value for the link is: <tool_url>?test={id} Fourth: Link to Kibana to access logs for the system under test, the link uses the time in the test to filter the logs in the range were the test was running, in this case the value for the link is: <kibana_url>/discover?_g=(time:(from:'{start_datetime}',mode:absolute,to:'{end_datetime}'))","title":"Useful links examples"},{"location":"phpUnit/","text":"PHPUnit plugin [Plugin is ready to use, docs to be updated]","title":"PHPUnit plugin"},{"location":"phpUnit/#phpunit-plugin","text":"[Plugin is ready to use, docs to be updated]","title":"PHPUnit plugin"},{"location":"python/","text":"Python Plugin [Plugin is in active development]","title":"Python Plugin"},{"location":"python/#python-plugin","text":"[Plugin is in active development]","title":"Python Plugin"},{"location":"start_guide/","text":"Getting Started Guide This section will guide you through main Delta features and help to start using this great tool! To have Delta up and running for your team, you will need to complete the following: Deploy Delta Reporter locally or into any cloud solution Hook Delta plugin to the tests you want to be displayed in Delta Deployment On this step it's important to decide, whether you want to try Delta Reporter locally, or want to deploy it to some cloud solution for the whole team to use. It's quite easy in both scenarios: Deploy Delta locally with docker-compose by cloning the repo and running one command Deploy Delta to Kubernetes Deploy Delta to Heroku , free tier cloud platform Configuration So after the deployment happened, you are all set and ready to run your tests! Now the question is: what tests do you want to start with? Delta Reporter has a number of plugins, that are really easy to hook up to your testing framework. Here is the list of what's available now: WebdriverIO TestNG PHPUnit These ones are under active development and will be available soon: Cypress JUnit Jest Python","title":"Getting Started Guide"},{"location":"start_guide/#getting-started-guide","text":"This section will guide you through main Delta features and help to start using this great tool! To have Delta up and running for your team, you will need to complete the following: Deploy Delta Reporter locally or into any cloud solution Hook Delta plugin to the tests you want to be displayed in Delta","title":"Getting Started Guide"},{"location":"start_guide/#deployment","text":"On this step it's important to decide, whether you want to try Delta Reporter locally, or want to deploy it to some cloud solution for the whole team to use. It's quite easy in both scenarios: Deploy Delta locally with docker-compose by cloning the repo and running one command Deploy Delta to Kubernetes Deploy Delta to Heroku , free tier cloud platform","title":"Deployment"},{"location":"start_guide/#configuration","text":"So after the deployment happened, you are all set and ready to run your tests! Now the question is: what tests do you want to start with? Delta Reporter has a number of plugins, that are really easy to hook up to your testing framework. Here is the list of what's available now: WebdriverIO TestNG PHPUnit These ones are under active development and will be available soon: Cypress JUnit Jest Python","title":"Configuration"},{"location":"structure/","text":"Report structure Delta Reporter tool has some great features available to you, please read the following guide if you want to know more! Structure Overview There are few main components that form the report, it's quite intuitive and easy to understand and follow. Projects Main page of the tool is the projects page. This page contains all the different projects your teams are working on, so that tests are nicely structured and easy to find. Launches After the project is selected, user is navigated to Launches page. This page contains all the test runs. Say, there was a release, and some UI tests were triggered by CI job. There will be a new launch created with your UI tests available there. If then you run some API tests locally, you will see another new line of launches, indicating it was a local launch. Great thing about delta, is that every element on the page can be configured and is not static. Suites After user selects a test run he wants to view, he is brought to the final page - suites and tests. Here is how it looks at the first glance: there is an expandable list of suites. When a test is selected, a new view appears on the right. This view contains all the necessary information about your test in one place: logs, screenshots, test history and resolution. If you'd like to know more about our awesome features - go straight to - Delta Reporter Features","title":"Report structure"},{"location":"structure/#report-structure","text":"Delta Reporter tool has some great features available to you, please read the following guide if you want to know more!","title":"Report structure"},{"location":"structure/#structure-overview","text":"There are few main components that form the report, it's quite intuitive and easy to understand and follow.","title":"Structure Overview"},{"location":"structure/#projects","text":"Main page of the tool is the projects page. This page contains all the different projects your teams are working on, so that tests are nicely structured and easy to find.","title":"Projects"},{"location":"structure/#launches","text":"After the project is selected, user is navigated to Launches page. This page contains all the test runs. Say, there was a release, and some UI tests were triggered by CI job. There will be a new launch created with your UI tests available there. If then you run some API tests locally, you will see another new line of launches, indicating it was a local launch. Great thing about delta, is that every element on the page can be configured and is not static.","title":"Launches"},{"location":"structure/#suites","text":"After user selects a test run he wants to view, he is brought to the final page - suites and tests. Here is how it looks at the first glance: there is an expandable list of suites. When a test is selected, a new view appears on the right. This view contains all the necessary information about your test in one place: logs, screenshots, test history and resolution. If you'd like to know more about our awesome features - go straight to - Delta Reporter Features","title":"Suites"},{"location":"testNG/","text":"TestNG Plugin [Plugin is ready to use, docs to be updated]","title":"TestNG Plugin"},{"location":"testNG/#testng-plugin","text":"[Plugin is ready to use, docs to be updated]","title":"TestNG Plugin"},{"location":"troubleshooting/","text":"Troubleshooting tips [Doc to be updated]","title":"Troubleshooting tips"},{"location":"troubleshooting/#troubleshooting-tips","text":"[Doc to be updated]","title":"Troubleshooting tips"},{"location":"webdriverIO/","text":"WebdriverIO Plugin A WebdriverIO reporter plugin to create Delta reports Installation The easiest way is to keep @delta-reporter/wdio-delta-reporter-service as a devDependency in your package.json . { \"devDependencies\": { \"@delta-reporter/wdio-delta-reporter-service\": \"^1.1.1\", } } You can simple do it by: npm i @delta-reporter/wdio-delta-reporter-service Configuration Delta reporter WebdriverIO plugin consists of a mix between a WebdriverIO Service and Reporter , so it needs to be declared as a reporter and as a service in config file. const DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter'); const DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\"); let delta_config = { host: 'delta_host', project: 'Project Name', testType: 'Test Type' }; exports.config = { // ... reporters: [ [DeltaReporter, delta_config] ], // ... services: [new DeltaService(delta_config)], // ... } Add screenshots and videos Screenshots can be attached to the report by using the sendFileToTest command in afterTest hook in wdio config file. The parameters are type , file and description : - type : Can be img or video - file : Path to the file to be uploaded - description : Optional value that will be displayed in the media container in Delta Reporter As shown in the example above, when this function is called, adn the test is failing, a screenshot image will be attached to the Delta report. afterTest(test) { if (test.passed === false) { const file_name = 'screenshot.png'; const outputFile = path.join(__dirname, file_name); browser.saveScreenshot(outputFile); browser.sendFileToTest('img', outputFile); } } Below is an example of all pieces needed in wdio config file to use this plugin along with Video Reporter , so that Delta Reporter is showing screenshots and videos of failed tests: var path = require('path'); const fs = require('fs'); const video = require('wdio-video-reporter'); const DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter'); const DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\"); // ... function getLatestFile({ directory, extension }, callback) { fs.readdir(directory, (_, dirlist) => { const latest = dirlist .map(_path => ({ stat: fs.lstatSync(path.join(directory, _path)), dir: _path })) .filter(_path => _path.stat.isFile()) .filter(_path => (extension ? _path.dir.endsWith(`.${extension}`) : 1)) .sort((a, b) => b.stat.mtime - a.stat.mtime) .map(_path => _path.dir); callback(directory + '/' + latest[0]); }); } let delta_config = { host: 'delta_host', // put your Delta Core url here project: 'Project Name', // Name of your project testType: 'Test Type' // eg., End to End, E2E, Frontend Acceptance Tests }; // ... exports.config = { // ... reporters: [ [DeltaReporter, delta_config] ], // ... services: [new DeltaService(delta_config)], // ... afterTest(test) { if (test.passed === false) { const file_name = 'screenshot.png'; const outputFile = path.join(__dirname, file_name); browser.saveScreenshot(outputFile); browser.sendFileToTest('img', outputFile); getLatestFile({ directory: browser.options.outputDir + '/_results_', extension: 'mp4' }, (filename = null) => { browser.sendFileToTest('video', filename, 'Video captured during test execution'); }); } } // ... } Usage For each test run, there are two main cases: Local run: No need to do anything, you can just run your wdio command ( ./node_modules/.bin/wdio ./wdio.conf.js ), so your test results appear in Delta Reporter in real time. CI run: please go to Jenkins section to dive into the details.","title":"WebdriverIO Plugin"},{"location":"webdriverIO/#webdriverio-plugin","text":"A WebdriverIO reporter plugin to create Delta reports","title":"WebdriverIO Plugin"},{"location":"webdriverIO/#installation","text":"The easiest way is to keep @delta-reporter/wdio-delta-reporter-service as a devDependency in your package.json . { \"devDependencies\": { \"@delta-reporter/wdio-delta-reporter-service\": \"^1.1.1\", } } You can simple do it by: npm i @delta-reporter/wdio-delta-reporter-service","title":"Installation"},{"location":"webdriverIO/#configuration","text":"Delta reporter WebdriverIO plugin consists of a mix between a WebdriverIO Service and Reporter , so it needs to be declared as a reporter and as a service in config file. const DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter'); const DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\"); let delta_config = { host: 'delta_host', project: 'Project Name', testType: 'Test Type' }; exports.config = { // ... reporters: [ [DeltaReporter, delta_config] ], // ... services: [new DeltaService(delta_config)], // ... }","title":"Configuration"},{"location":"webdriverIO/#add-screenshots-and-videos","text":"Screenshots can be attached to the report by using the sendFileToTest command in afterTest hook in wdio config file. The parameters are type , file and description : - type : Can be img or video - file : Path to the file to be uploaded - description : Optional value that will be displayed in the media container in Delta Reporter As shown in the example above, when this function is called, adn the test is failing, a screenshot image will be attached to the Delta report. afterTest(test) { if (test.passed === false) { const file_name = 'screenshot.png'; const outputFile = path.join(__dirname, file_name); browser.saveScreenshot(outputFile); browser.sendFileToTest('img', outputFile); } } Below is an example of all pieces needed in wdio config file to use this plugin along with Video Reporter , so that Delta Reporter is showing screenshots and videos of failed tests: var path = require('path'); const fs = require('fs'); const video = require('wdio-video-reporter'); const DeltaReporter = require('@delta-reporter/wdio-delta-reporter-service/lib/src/reporter'); const DeltaService = require(\"@delta-reporter/wdio-delta-reporter-service\"); // ... function getLatestFile({ directory, extension }, callback) { fs.readdir(directory, (_, dirlist) => { const latest = dirlist .map(_path => ({ stat: fs.lstatSync(path.join(directory, _path)), dir: _path })) .filter(_path => _path.stat.isFile()) .filter(_path => (extension ? _path.dir.endsWith(`.${extension}`) : 1)) .sort((a, b) => b.stat.mtime - a.stat.mtime) .map(_path => _path.dir); callback(directory + '/' + latest[0]); }); } let delta_config = { host: 'delta_host', // put your Delta Core url here project: 'Project Name', // Name of your project testType: 'Test Type' // eg., End to End, E2E, Frontend Acceptance Tests }; // ... exports.config = { // ... reporters: [ [DeltaReporter, delta_config] ], // ... services: [new DeltaService(delta_config)], // ... afterTest(test) { if (test.passed === false) { const file_name = 'screenshot.png'; const outputFile = path.join(__dirname, file_name); browser.saveScreenshot(outputFile); browser.sendFileToTest('img', outputFile); getLatestFile({ directory: browser.options.outputDir + '/_results_', extension: 'mp4' }, (filename = null) => { browser.sendFileToTest('video', filename, 'Video captured during test execution'); }); } } // ... }","title":"Add screenshots and videos"},{"location":"webdriverIO/#usage","text":"For each test run, there are two main cases: Local run: No need to do anything, you can just run your wdio command ( ./node_modules/.bin/wdio ./wdio.conf.js ), so your test results appear in Delta Reporter in real time. CI run: please go to Jenkins section to dive into the details.","title":"Usage"}]}